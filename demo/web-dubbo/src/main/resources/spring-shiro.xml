<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.2.xsd"
    default-lazy-init="true">

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
               <value>classpath:redis.properties</value>
                <!--要是有多个配置文件，只需在这里继续添加即可 -->
            </list>
        </property>
    </bean>
    
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	    <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
	    <property name="realm" ref="realm"/>  
	    <!-- sessionManager -->
	    <property name="sessionManager" ref="sessionManager" />
	    <!-- cacheManager -->
	    <property name="cacheManager" ref="cacheManager" />
	    <!-- By default the servlet container sessions will be used.  Uncomment this line
	         to use shiro's native sessions (see the JavaDoc for more): -->
	    <!-- <property name="sessionMode" value="native"/> -->
	</bean>

    <bean id="realm" class="com.nova.app.sys.security.realm.MyShiroRealm">  
      <property name="userService" ref="userService" />
    </bean>  

    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<property name="authenticationStrategy">
			<bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy" />
		</property>
	</bean>
	
    <!--凭证匹配器 可以自定义。利用这个将密码进行解密验证 -->
<!--     <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5" />
        <property name="hashIterations" value="2" />
    </bean> -->

    <!-- 安全认证过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- shiro的核心安全接口 -->
        <property name="securityManager" ref="securityManager" /><!-- 要求登录时的链接 -->
        <property name="loginUrl" value="/login" />
        <!-- 登陆成功后要跳转的连接 如果首先访问受保护 URL 登录成功，则跳转到实际访问页面 -->
        <property name="successUrl" value="/user/list" />
        <!--可以在代码里面配置  -->
        <property name="unauthorizedUrl" value="/sys/perm-error" />

        <property name="filters">
            <map>
                <entry key="authc" value-ref="formAuthenticationFilter" />
                <entry key="perms" value-ref="UrlPermissionsFilter" />
            </map>
        </property>
        <!-- shiro连接约束配置 -->
        <property name="filterChainDefinitions">
            <ref bean="shiroFilterChainDefinitions" />
        </property>
    </bean>


    <!-- 加载配置属性文件 -->
    <!-- Shiro权限过滤过滤器定义 authc 表示需要认证 anon 表示匿名访问（不需要认证与授权）perms[SECURITY_ACCOUNT_VIEW] 表示用户需要提供值为“SECURITY_ACCOUNT_VIEW”Permission 信息 -->
    <!-- user用户拦截器，用户已经身份验证/记住我登录的都可；示例“/**=user” -->
    <!-- authc基于表单的拦截器；如“/**=authc”，如果没有登录会跳到相应的登录页面登录；表单提交的用户名参数名（ username）； passwordParam：表单提交的密码参数名（password）； rememberMeParam：表单提交的密码参数名 -->
    <!-- logout退出拦截器，主要属性：redirectUrl：退出成功后重定向的地址（/）;示例“/logout=logout” -->
    <!-- anon 匿名拦截器，即不需要登录即可访问；一般用于静态资源过滤；示例“/static/**=anon” -->

    <!-- 授权相关的 -->
    <!-- roles 角色授权拦截器，验证用户是否拥有所有角色；主要属性： loginUrl：登录页面地址（/login.jsp）；unauthorizedUrl：未授权后重定向的地址；示例“/admin/**=roles[admin]” perms 权限授权拦截器，验证用户是否拥有所有权限；属性和roles一样；示例“/user/**=perms["user:create"]” -->
    <bean name="shiroFilterChainDefinitions" class="java.lang.String">
        <constructor-arg>
            <value>
            	/ =anon
            	/sys/perm-error=anon
            	/test/** = anon
                /static/** = anon
                /login = authc
                /out = logout
                /user/add* = authc,perms 
                /user/delete* = authc,perms
                /user/view/** = authc,perms
                /** = authc,perms
            </value>
        </constructor-arg>
    </bean>
	
	<bean id="UrlPermissionsFilter" class="com.nova.app.sys.security.filter.UrlPermissionsFilter" >
		<property name="sysService" ref="sysService" /> 
	</bean>
    
    <!-- 基于Form表单的身份验证过滤器-->
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username" />
        <property name="passwordParam" value="password" />
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- shiro redisManager -->
	<bean id="redisManager" class="org.crazycake.shiro.RedisManager">
	    <property name="host" value="${redis.host}"/>
	    <property name="port" value="${redis.port}"/>
	    <property name="expire" value="1800"/>
	    <!-- optional properties:
	    <property name="timeout" value="10000"/>
	    <property name="password" value="123456"/>
	    -->
	</bean>

	<bean id="redisSessionDAO" class="org.crazycake.shiro.RedisSessionDAO">
	    <property name="redisManager" ref="redisManager" />
	</bean>
	
	<!-- sessionManager -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
	    <property name="sessionDAO" ref="redisSessionDAO" />
	</bean>
	
	<!-- cacheManager -->
	<bean id="cacheManager" class="org.crazycake.shiro.RedisCacheManager">
	    <property name="redisManager" ref="redisManager" />
	</bean>
</beans>